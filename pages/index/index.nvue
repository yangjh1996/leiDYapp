<template>
  <view class="container">
    <!-- #ifdef APP -->

    <image
      v-if="isShowAixin"
      src="@/static/img/index/aixining.png"
      :style="
        'position: fixed; margin-left: ' +
        aixinLeft +
        'px; margin-top: ' +
        aixinTop +
        'px; width: 70px; height: 65px; transform: rotate(' +
        Rotate +
        'deg);'
      "
    ></image>
    <view
      :style="
        'width: ' + windowWidth + 'px; height: ' + boxStyle.height + 'px;'
      "
      v-if="isShow1"
    >
      <!--
			 1.这里的 swiper 不是用来控制视频滑动的，而是用来控制左右滑动的，如果不需要的可以改成 view

			 2.为了 视频无限加载，已经把 21 行的 appear 去掉了，加上了 loadmore 方法（第10行）

			 3.由于方法比较多，可以采取下面的方式查看代码：
			 （1）Mac：按住 option 键，然后点击方法名，即可跳转到方法
			 （2）windows：按住 Alt 键，然后鼠标左击，即可跳转到方法
			 -->
      <list
        @scroll="scrolls"
        :show-scrollbar="false"
        ref="listBox"
        :pagingEnabled="true"
        :scrollable="true"
      >
        <!-- 刷新模块 -->
        <refresh
          class="refresh"
          @refresh="onrefresh"
          @pullingdown="onpullingdown"
          :display="refreshing ? 'show' : 'hide'"
        >
          <loading style="background-color: #ffffff">
            <image
              src="@/static/img/index/logins.gif"
              :style="
                'width: 80upx; height: 40upx; margin-top: 80upx; margin-bottom: 30upx; margin-left: ' +
                (windowWidth - 200) +
                'px;'
              "
            ></image>
          </loading>
        </refresh>

        <!-- 循环数据 -->
        <cell v-for="(item, i) in dataList" :key="i">
          <!-- 用div把视频模组套起来 -->
          <view
            :style="
              'width: ' + windowWidth + 'px; height: ' + boxStyle.height + 'px;'
            "
            :ref="'item' + i"
          >
            <image
              v-if="k !== i"
              :src="item.src + '?x-oss-process=video/snapshot,t_480,f_jpg'"
              :mode="mode"
              :style="
                'width: ' +
                windowWidth +
                'px; height: ' +
                (wHeight - deleteHeight) +
                'px; position: absolute;'
              "
            ></image>
            <view v-if="k - i <= 1">
              <view class="root">
                <video
                  :id="item._id"
                  :loop="true"
                  :src="item.src"
                  :muted="item.isplay"
                  @play="playIngs(i)"
                  :enable-progress-gesture="false"
                  :page-gesture="false"
                  :controls="false"
                  :http-cache="true"
                  :show-loading="false"
                  :show-fullscreen-btn="false"
                  :show-center-play-btn="false"
                  :style="boxStyle"
                  :object-fit="object_fit"
                  @timeupdate="timeupdate($event, i)"
                  :poster="
                    item.src + '?x-oss-process=video/snapshot,t_480,f_jpg'
                  "
                ></video>
                <!-- 这里是封面 -->
                <image
                  v-if="!item.playIng"
                  :src="item.src + '?x-oss-process=video/snapshot,t_480,f_jpg'"
                  :mode="mode"
                  :style="
                    'width: ' +
                    windowWidth +
                    'px; height: ' +
                    (wHeight - deleteHeight) +
                    'px; position: absolute;'
                  "
                ></image>
              </view>
              <!-- 直接用 view 就行了，一样是可以覆盖原生组件的 -->
              <!-- 这个是暂停时出现的图标 -->
              <view
                class="videoHover"
                @click="tapVideoHover(item.state, $event)"
                @touchstart="touchstartHover"
                :style="boxStyle"
              >
                <image
                  v-if="item.state == 'pause'"
                  class="playState"
                  src="@/static/img/index/play.png"
                ></image>
              </view>
              <view class="userInfo">
                <!-- 1.头像 -->
                <image
                  v-if="item.isShowProgressBarTime == false"
                  @click="tozuozhe"
                  class="userAvatar"
                  :src="item.href"
                  mode="aspectFill"
                ></image>
                <!-- 2.点赞 -->
                <view
                  v-if="item.isShowProgressBarTime == false"
                  @click="cLike(item.like)"
                  style="opacity: 0.9; margin-top: 17px"
                >
                  <image
                    v-if="item.like"
                    src="@/static/img/index/xin.png"
                    style="
                      width: 40px;
                      height: 40px;
                      position: absolute;
                      right: 6px;
                    "
                  ></image>
                  <image
                    v-if="!item.like"
                    src="@/static/img/index/xin-2.png"
                    style="
                      width: 40px;
                      height: 40px;
                      position: absolute;
                      right: 6px;
                    "
                  ></image>
                  <text
                    style="
                      color: #ffffff;
                      margin-top: 5px;
                      font-size: 14px;
                      text-align: center;
                      margin-top: 40px;
                      font-weight: bold;
                    "
                    :class="{ likeNumActive: item.like }"
                    >{{ item.like_n }}</text
                  >
                </view>
                <!-- 3.评论 -->
                <view
                  v-if="item.isShowProgressBarTime == false"
                  class="comment"
                  @click="toComment(i)"
                  style="opacity: 0.9; margin-top: 17px"
                >
                  <image
                    src="@/static/img/index/liaotian-2.png"
                    style="
                      width: 35px;
                      height: 35px;
                      position: absolute;
                      right: 7px;
                    "
                  ></image>
                  <text
                    style="
                      color: #ffffff;
                      margin-top: 5px;
                      font-size: 14px;
                      font-weight: bold;
                      text-align: center;
                      margin-top: 40px;
                    "
                    >{{ item.sms_n }}</text
                  >
                </view>
                <!-- 4.分享 -->
                <view
                  v-if="item.isShowProgressBarTime == false"
                  @click="share"
                  style="opacity: 0.9; margin-top: 17px"
                >
                  <image
                    src="@/static/img/index/share-fill.png"
                    style="
                      width: 40px;
                      height: 40px;
                      position: absolute;
                      right: 5px;
                    "
                  ></image>
                  <text
                    style="
                      color: #ffffff;
                      margin-top: 5px;
                      font-size: 14px;
                      text-align: center;
                      font-weight: bold;
                      margin-top: 40px;
                    "
                    >分享</text
                  >
                </view>
                <!-- 5.转轮 -->
                <block v-if="platform == 'ios'">
                  <view
                    v-if="item.isShowProgressBarTime == false"
                    @click="dealVoice"
                    style="margin-top: 17px"
                  >
                    <view
                      style="
                        width: 48px;
                        height: 48px;
                        border-radius: 50px;
                        position: absolute;
                        right: 2.5px;
                      "
                    >
                      <image
                        :style="
                          'width: 48px; height: 48px; border-radius: 50px; transform: rotate(' +
                          rotates +
                          'deg);'
                        "
                        src="@/static/img/index/bfq.png"
                        mode="aspectFill"
                      ></image>
                      <image
                        v-if="showPlay"
                        :style="
                          'width: 30px; height: 30px; margin-top: 9px; margin-left: 9px; position: absolute; border-radius: 50px; transform: rotate(' +
                          rotates +
                          'deg);'
                        "
                        :src="item.href"
                        mode="aspectFill"
                      ></image>
                    </view>
                  </view>
                  <view
                    v-if="platform == 'ios'"
                    style="margin-top: 48px"
                  ></view>
                </block>
                <block v-if="platform !== 'ios'">
                  <view
                    v-if="item.isShowProgressBarTime == false"
                    @click="dealVoice"
                    style="margin-top: 15px; width: 48px; height: 48px"
                  >
                    <text style="font-size: 0.1px; opacity: 0">.</text>
                    <view
                      style="
                        width: 48px;
                        height: 48px;
                        border-radius: 50px;
                        position: absolute;
                      "
                    >
                      <image
                        :style="
                          'width: 48px; height: 48px; border-radius: 50px; transform: rotate(' +
                          rotates +
                          'deg);'
                        "
                        src="@/static/img/index/bfq.png"
                        mode="aspectFill"
                      ></image>
                      <image
                        v-if="showPlay"
                        :style="
                          'width: 30px; height: 30px; margin-top: 9px; margin-left: 9px; position: absolute; border-radius: 50px; transform: rotate(' +
                          rotates +
                          'deg);'
                        "
                        :src="item.href"
                        mode="aspectFill"
                      ></image>
                    </view>
                  </view>
                </block>
              </view>
              <!-- 最底下的文字部分 -->
              <view
                class="content"
                v-if="
                  dataList.length !== 0 &&
                  dataList[k].isShowProgressBarTime == false
                "
              >
                <text
                  class="userName"
                  :style="'width: ' + (windowWidth - 90) + 'px;'"
                  >{{ item.title }}</text
                ><!-- i={{i}} -->
                <text
                  class="words"
                  :style="'width: ' + (windowWidth - 90) + 'px;'"
                  >{{ item.msg }}-{{ k + 1 }}</text
                ><!-- k={{k}} -->
              </view>
              <image
                v-if="item.isShowimage == true"
                :src="
                  item.src +
                  '?x-oss-process=video/snapshot,t_' +
                  currenttimes +
                  '000,f_jpg'
                "
                mode="aspectFill"
                :style="
                  'width: 120upx; height: 160upx; border-radius: 10upx; position: absolute; bottom: ' +
                  (ProgressBarBottom + 160) +
                  'upx; left: ' +
                  (currentPositions - 15) +
                  'px;'
                "
              ></image>
            </view>
          </view>
        </cell>
      </list>
      <!-- 1.注意：进度条这类拖拽的东西不能放进block\cell这些循环体中的，要不然touchmove方法会捕捉有误 -->
      <view
        v-if="
          dataList.length !== 0 && dataList[k].isShowProgressBarTime == true
        "
        :style="
          'position: absolute; bottom: ' +
          (ProgressBarBottom + this.windowWidth * 0.2) / 2 +
          'px; left: ' +
          (windowWidth * 2 - this.windowWidth * 1.35) / 2 +
          'px;'
        "
      >
        <text style="font-size: 22px; font-weight: bold; color: #f1f1f1"
          >{{ changeTime }} / {{ videoTimes }}</text
        >
      </view>
      <!-- 这里就是进度条了：纯手工进度条，调整位置的话就把他们的 bottom 改成一下就行了 -->
      <view
        v-if="isDragging == false"
        @touchmove="touchmove"
        @touchend="touchend"
        @touchstart="touchstart"
        style="position: absolute; bottom: 0; left: 0"
      >
        <!-- 1.这一步必须加，为了适配低端机型 -->
        <text :style="'width: ' + windowWidth + 'px; opacity: 0;'">.</text>
        <!-- 2.这是未加载的时的右边的灰色部分 -->
        <view
          :style="
            'width: ' +
            windowWidth +
            'px; height: 4upx; background-color: #C8C7CC; position: absolute; bottom: ' +
            ProgressBarBottom +
            'upx; opacity: ' +
            ProgressBarOpacity +
            ';'
          "
        ></view>
        <!-- 3.这里我采用的分离式办法：就是让滑动样式和不滑动的样式分开，这样相互不干扰，可以避免进度条闪动的问题 -->
        <!-- 4.注意：isShowProgressBarTime 加入了返回数据中 -->
        <view
          v-if="
            dataList.length !== 0 && dataList[k].isShowProgressBarTime == false
          "
          :style="
            'width: ' +
            currentPosition +
            'px; height: 4upx; background-color: #FFFFFF; position: absolute; bottom: ' +
            ProgressBarBottom +
            'upx; left: 0; opacity: ' +
            (ProgressBarOpacity - 0.1) +
            ';'
          "
        ></view>
        <view
          v-if="
            dataList.length !== 0 && dataList[k].isShowProgressBarTime == true
          "
          :style="
            'width: ' +
            currentPositions +
            'px; height: 8upx; background-color: #FFFFFF; position: absolute; bottom: ' +
            ProgressBarBottom +
            'upx; left: 0; opacity: ' +
            (ProgressBarOpacity + 0.05) +
            ';'
          "
        ></view>
        <view
          v-if="
            dataList.length !== 0 && dataList[k].isShowProgressBarTime == false
          "
          :style="
            'width: 4px; height: 4px; background-color: #FFFFFF; border-radius: 10px; position: absolute; bottom: ' +
            (ProgressBarBottom - 2) +
            'upx; left: ' +
            currentPosition +
            'px; opacity: ' +
            ProgressBarOpacity +
            ';'
          "
        ></view>
        <view
          v-if="
            dataList.length !== 0 && dataList[k].isShowProgressBarTime == true
          "
          :style="
            'width: ' +
            dotWidth +
            'px; height: ' +
            dotWidth +
            'px; background-color: #FFFFFF; border-radius: 10px; position: absolute; bottom: ' +
            (ProgressBarBottom - 5) +
            'upx; left: ' +
            (currentPositions - 5) +
            'px; opacity: ' +
            ProgressBarOpacity +
            ';'
          "
        ></view>
      </view>
    </view>

    <uni-popup
      type="bottom"
      ref="pinglun"
      @touchmove.stop.prevent="moveHandle"
      v-if="isShow2"
    >
      <view
        :style="
          'width: ' +
          windowWidth +
          'px; height: ' +
          boxStyle.height / heightNum +
          'px; background-color: #242424; border-top-left-radius: 10px; border-top-right-radius: 10px;'
        "
      >
        <!--
				 注意：
				 deleteIOSHeight
				 deleteAndroidHeight
				 这两个参数用于控制评论等的高度
				 -->
        <douyin-scrollview
          :Width="windowWidth"
          :Height="boxStyle.height / 1.23"
          :deleteIOSHeight="36"
          :deleteAndroidHeight="15"
          @closeScrollview="closeScrollview"
        ></douyin-scrollview>
      </view>
    </uni-popup>
    <!-- #endif -->
    <!-- #ifndef APP -->
    <view style="width: 1px; height: 1px"></view>
    <!-- #endif -->
  </view>
</template>
<script>
// import userList from './data.js'//这个是假数据
/*
	引入评论组件
	*/
import douyinScrollview from "@/components/douyin-scrollview/douyin-scrollview.nvue";

import { getVideoList } from "@/api/video";
import { baseurl } from "@/api/requestUtil";
export default {
  data() {
    return {
      //下面打🌟号的是必须要的基础字段
      //下面打💗号的是拥有滑动条的必须字段
      dataList: [], //用于数据循环的列表🌟💗
      wHeight: 0, //获取的屏幕高度🌟💗
      boxStyle: {
        //视频，图片封面样式🌟💗
        height: 0,
        width: 0,
      },
      Heights: 0,
      k: 0, //默认为0🌟💗
      playIngIds: [], //正在播放的视频id列队，列队用于处理滑动过快导致的跳频问题🌟💗
      ready: false, //可忽略
      isDragging: false, //false代表停止滑动🌟💗
      refreshing: true, //用于下拉刷新🌟💗
      windowWidth: 0, //获取屏幕宽度🌟💗
      windowHeight: 0,
      dex: [0, 0], //用于判断是上滑还是下滑，第一个存旧值，第二个存新值【目前在1.0.7已经废弃】
      currents: 0, //用于左右滑动，0代表视频界面，1代表右滑界面🌟💗
      platform: "", //用于获取操作系统：ios、android🌟💗
      playIng: false, //用于视频初始化时是否播放，默认不播放🌟💗
      videoTime: "", //视频总时长，这个主要用来截取时间数值💗
      videoTimes: "", //视频时长，用这个来获取时间值，例如：00:30这个时间值💗
      changeTime: "", //显示滑动进度条时变化的时间💗
      isShowimage: false, //是否显示封面【1.0.4已废弃，但是意思需要记住】
      currenttimes: 0, //当前时间💗
      isShowProgressBarTime: false, //是否拖动进度条，如果拖动（true）则显示进度条时间，否则不显示（false）【1.0.4已废弃，但是意思需要记住】
      ProgressBarOpacity: 0.7, //进度条不拖动时的默认值，就是透明的💗
      dotWidth: 0, //播放的小圆点，默认没有💗
      deleteHeight: 0, //测试高度🌟💗
      percent: 0, //百分小数💗
      currentPosition: 0, //滑块当前位置💗//2.0已弃用，现已用于后端参数
      currentPositions: 0, //滑块当前位置的副本💗//2.0已弃用，现已用于后端参数
      newTime: 0, //跟手滑动后的最新时间💗
      timeNumber: 0, //🌟💗
      ProgressBarBottom: 20, //进度条离底部的距离💗
      object_fit: "contain", //视频样式默认包含🌟💗
      mode: "aspectFit", //图片封面样式🌟💗
      timeout: "", //🌟用来阻止 setTimeout()方法
      voice: "", //🌟用来阻止 setTimeout()方法
      oldVideo: "",

      isAutoplay: false, //是否开启自动播放(默认不开启)
      autoplayText: "开启自动播放",
      timers: "",

      // 引入评论 - 参数
      heightNum: 1.18,

      // 双击点赞参数
      touchNum: 0,
      aixinLeft: 0,
      aixinTop: 0,
      isShowAixin: false,
      Rotate: 0,

      isShow1: false, //控制渲染变量1
      isShow2: false, //控制渲染变量2 ： 专门控制 uni-popup

      showPlay: false, //转轮显示控制
      rotates: 0, //转轮旋转角度
      rotateTime: "", //转轮递归事件控制
      xrotats: "",

      player: "",
    };
  },
  components: {
    douyinScrollview,
  },
  watch: {
    k(k, old_k) {
      //监听 k 值的变化，可以控制视频的播放与暂停
      console.log(k);
      // 清理定时器
      this.clearToTime();
      // this.dataList[old_k].state = 'stop'//如果是被滑走的视频，就停止播放
      this.dataList[old_k].playIng = false; //如果视频暂停，就加载封面
      this.dataList[old_k].isplay = true;
      uni.createVideoContext(this.dataList[old_k]._id, this).play();
      clearTimeout(this.oldVideo);
      this.oldVideo = setTimeout(() => {
        uni.createVideoContext(this.dataList[old_k]._id, this).seek(0);
        uni.createVideoContext(this.dataList[old_k]._id, this).pause();
        console.log(
          "预留第" + (old_k + 1) + "个视频：" + this.dataList[old_k]._id
        );
      }, 500);
      // 2.0版本已经去掉了下面这一句，视频不用暂停，只需要把声音禁止就行
      // uni.createVideoContext(this.dataList[old_k]._id + '' + old_k,this).stop()//如果视频暂停，那么旧视频停止，这里的this.dataList[old_k]._id + '' + old_k，后面加 old_k 是为了每一个视频的 id 值不同，这样就可以大程度的避免串音问题
      this.dataList[k].state = "play";
      console.log("已经暂停 --> 第" + (old_k + 1) + "个视频～"); //提示
      clearTimeout(this.player);
      this.player = setTimeout(() => {
        uni.createVideoContext(this.dataList[k]._id, this).play();
      }, 50);

      if (k == this.dataList.length - 1) {
        (async () => {
          await this.getData();
          // 【2.0版本更新内容】- start
          var p = k;
          ++p;
          this.dataList[p].isplay = true;
          setTimeout(() => {
            uni.createVideoContext(this.dataList[p]._id, this).play();
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
              uni.createVideoContext(this.dataList[p]._id, this).seek(0);
              uni.createVideoContext(this.dataList[p]._id, this).pause();
              console.log(
                "预加载第" + (p + 1) + "个视频：" + this.dataList[p]._id
              );
            }, 1500);
          }, 20);
          //【2.0版本更新内容】- end
        })();
      }
      //【此处处理进度条卡住的问题】
      if (uni.getSystemInfoSync().platform !== "ios") {
        setTimeout(() => {
          uni.createVideoContext(this.dataList[k]._id, this).pause();
          uni.createVideoContext(this.dataList[k]._id, this).play();
        }, 100);
      }
      this.xrotats = setTimeout(() => {
        this.showPlay = true;
        this.rotateX();
      }, 200);
    },
  },
  onShow() {
    console.log("回到前台");
    if (this.dataList.length !== 0) {
      this.dataList[this.k].state = "play";
      uni.createVideoContext(this.dataList[this.k]._id, this).play();
    }
  },
  onHide() {
    this.dataList[this.k].state = "pause"; //界面隐藏也要停止播放视频
    uni.createVideoContext(this.dataList[this.k]._id, this).pause(); //暂停以后继续播放
    console.log("到后台");
  },
  onLoad() {
    this.platform = uni.getSystemInfoSync().platform;
    var model = uni.getSystemInfoSync().model;
    if (
      this.platform == "ios" &&
      (model !== "iPhone6" ||
        model !== "iPhone6s" ||
        model !== "iPhone7" ||
        model !== "iPhone8")
    ) {
      this.deleteHeight = 32; //有 tabbar的 修改这里可以改变视频高度

      /*
				 引入评论参数
				 */

      this.heightNum = 1.27;
    } else {
      this.deleteHeight = 32;
      /*
				引入评论参数
				*/
      this.heightNum = 1.18;
    }
    // 控制渲染 -- start
    this.isShow1 = true;
    setTimeout(() => {
      this.isShow2 = true;
    }, 400);
    // 控制渲染 -- end
    this.windowWidth = uni.getSystemInfoSync().screenWidth; //获取屏幕宽度
    this.boxStyle.width = this.windowWidth + "px"; //给宽度加px
    this.wHeight = uni.getSystemInfoSync().screenHeight; //获取屏幕高度
    // this.boxStyle.height = this.wHeight - this.deleteHeight; //改变视频高度
    this.boxStyle.height = uni.getSystemInfoSync().windowHeight;
    this.get(); //这一步，加载视频数据
    this.rotateX();
  },
  onReady() {},
  methods: {
    toBilibili() {
      // #ifdef H5
      window.open("https://www.bilibili.com/video/BV1gi4y12745");
      // #endif
    },
    selectVideo() {
      uni.navigateTo({
        url: "/pages/selectVideo/selectVideo",
      });
    },
    dealVoice() {
      uni.showToast({
        title: "处理声音",
        icon: "none",
      });
    },
    clearToTime() {
      //清理定时器
      for (let i = 0; i < 20; i++) {
        clearTimeout(this.rotateTime);
        clearTimeout(this.xrotats);
        this.showPlay = false;
        this.rotates = 0;
      }
    },
    clearTime() {
      //清理定时器
      for (let i = 0; i < 20; i++) {
        clearTimeout(this.rotateTime);
        clearTimeout(this.xrotats);
      }
    },
    rotateX() {
      // clearTimeout(this.rotateTime);
      this.rotateTime = setTimeout(() => {
        this.rotateX();
        this.rotates += 1;
      }, 30);
    },
    autoPlay() {
      this.isAutoplay = !this.isAutoplay;
      if (!this.isAutoplay) {
        this.autoplayText = "开启自动播放";
        uni.showToast({
          title: "关闭自动播放",
          icon: "none",
          duration: 3000,
        });
      } else {
        this.autoplayText = "关闭自动播放";
        uni.showToast({
          title: "开启自动播放",
          icon: "none",
          duration: 3000,
        });
      }
    },
    getData() {
      // 这里就是数据加载完以后再向后端发送数据的地方
      getVideoList().then((res) => {
        if (res.code === 200) {
          const msg = res.data.map((e) => ({
            _id: e.id, //1.每一个视频独有 id （自定义）
            username: "意识到", //2.视频拥有者名称
            href: "https://vkceyugu.cdn.bspapp.com/VKCEYUGU-2908110e-6da2-4899-8b44-d45c153457ad/247c9ea8-c708-440b-9dbf-3c3facb728ee.png", //3.头像
            title: e.title, //4.第一行标题
            msg: e.description, //5.第二行内容
            state: "pause", //6.初始状态标志（不改）
            like: 0, //7.是否是自己喜欢，0不喜欢，1喜欢。默认不喜欢
            like_n: 0, //8.喜欢数量
            sms_n: 0, //9.评论数
            src: `${baseurl}/api/staticfiles/raw/${e.raw}`, //10.视频链接
            playNumber: 0, //11.播放视频的数量
            pinlun: [], //12.评论
            playIng: false, //13.播放（默认这个即可）
            isShowimage: false, //14.是否显示封面（默认这个即可）
            isShowProgressBarTime: false, //15.是否显示进度条（默认这个即可）
            isplay: true, //16.是否播放音频（默认这个即可）
          }));
          let List = JSON.parse(JSON.stringify(this.dataList));
          for (let i = 0; i < msg.length; i++) {
            List.push(msg[i]);
          }
          this.dataList = List;
        }
      });
    },
    touchstart(event) {
      this.dataList[this.k].isShowimage = true; //刚触摸的时候就要显示预览视频图片了
      this.dataList[this.k].isShowProgressBarTime = true; //显示时间线
      this.ProgressBarOpacity = 1; //让滑块显示起来更明显一点
      this.dotWidth = 10; //让点显示起来更明显一点
    },
    touchend() {
      //当手松开后，跳到最新时间
      uni
        .createVideoContext(this.dataList[this.k]._id, this)
        .seek(this.newTime);
      if (this.dataList[this.k].state == "pause") {
        this.dataList[this.k].state = "play";
        uni.createVideoContext(this.dataList[this.k]._id, this).play();
      }
      this.dataList[this.k].isShowProgressBarTime = false; //触摸结束后，隐藏时间线
      this.dataList[this.k].isShowimage = false; //触摸结束后，隐藏时间预览
      this.ProgressBarOpacity = 0.5; //隐藏起来进度条，不那么明显了
      this.dotWidth = 0; //隐藏起来进度条，不那么明显了
    },
    touchmove(event) {
      //当手移动滑块时，计算位置、百分小数、新的时间
      var msg = [];
      if (this.videoTime !== "") {
        msg = this.videoTime.split(":");
      }
      var timeNumber = Number(msg[0]) * 60 + Number(msg[1]);
      this.currentPositions = event.changedTouches[0].screenX;
      this.percent = this.currentPositions / this.windowWidth;
      this.newTime = this.percent * timeNumber;
      this.currenttimes = parseInt(this.newTime);
      let theTime = this.newTime;
      let middle = 0; // 分
      if (theTime > 60) {
        middle = parseInt(theTime / 60);
        theTime = parseInt(theTime % 60);
      }
      this.changeTime = `${
        Math.round(middle) > 9 ? Math.round(middle) : "0" + Math.round(middle)
      }:${
        Math.round(theTime) > 9
          ? Math.round(theTime)
          : "0" + Math.round(theTime)
      }`;
    },
    timeupdate(event, index) {
      //计算滑块当前位置，计算当前百分小数
      // console.log(index)
      if (index == this.k) {
        // console.log(event)
        var currenttime = event.detail.currentTime;
        this.timeNumber = Math.round(event.detail.duration);
        this.getTime();
        this.percent = currenttime / this.timeNumber;
        this.currentPosition = this.windowWidth * this.percent;
        let theTime = currenttime;
        let middle = 0; // 分
        if (theTime > 60) {
          middle = parseInt(theTime / 60);
          theTime = parseInt(theTime % 60);
        }
        this.changeTime = `${
          Math.round(middle) > 9 ? Math.round(middle) : "0" + Math.round(middle)
        }:${
          Math.round(theTime) > 9
            ? Math.round(theTime)
            : "0" + Math.round(theTime)
        }`;

        clearTimeout(this.voice);
        this.voice = setTimeout(() => {
          this.dataList[this.k].isplay = false;
        }, 200);
        setTimeout(() => {
          this.dataList[this.k].playIng = true;
        }, 650);

        //自动切换视频
        if (this.isAutoplay) {
          //true,代表自动播放
          if (Math.round(currenttime) == this.timeNumber - 1) {
            const dom = uni.requireNativePlugin("dom");
            let doms = "item" + (this.k + 1);
            setTimeout(() => {
              let el = this.$refs[doms][0];
              dom.scrollToElement(el, {
                offset: 0,
                animated: true,
              });
            }, 500);
          }
        }
      }
    },
    getTime() {
      //得到时间函数
      this.videoTime = this.formatSeconds(this.timeNumber);
      // console.log(that.videoTime)
      var msg = [];
      if (this.videoTime !== "") {
        msg = this.videoTime.split(":");
      }
      this.videoTimes = `${msg[0] > 9 ? msg[0] : "0" + msg[0]}:${
        msg[1] > 9 ? msg[1] : "0" + msg[1]
      }`;
    },
    formatSeconds(value) {
      //获取时间函数
      let theTime = parseInt(value); // 秒
      let middle = 0; // 分
      if (theTime > 60) {
        middle = parseInt(theTime / 60);
        theTime = parseInt(theTime % 60);
      }
      return `${middle > 9 ? middle : middle}:${
        theTime > 9 ? theTime : theTime
      }`;
    },
    playIngs(index) {
      //
    },
    moreVideo(index) {},
    toVideo(index) {},
    erweima() {},
    tozuozhe() {
      this.currents = 1; //点击头像以后就会切换
    },
    stop() {
      // console.log('stop')
    },
    scrolls(event) {
      this.isDragging = event.isDragging;
      if (!event.isDragging) {
        //isDragging：判断用户是不是在滑动，滑动：true，停止滑动：false。我们要用户停止滑动时才给 k 赋值，这样就可以避免很多麻烦
        var i = Math.round(
          Math.abs(event.contentOffset.y) /
            (this.wHeight - this.deleteHeight + 1)
        ); //先用绝对值取出滑动的距离，然后除以屏幕高度，取一个整，就知道你现在滑动到哪一个视频了
        if (i !== this.k) {
          //这里加判断是因为这个方法会执行很多次，会造成重复请求，所以这里写一个限制
          let num = 300;
          clearTimeout(this.timers);
          this.timers = setTimeout(() => {
            this.k = i; //判断了用户没有滑动，确认了用户的确是在看这个视频，然后就赋值啦
            this.dataList[this.k].state = "play";
            console.log("正在播放 --> 第" + (this.k + 1) + "个视频～");
          }, num);
        }
      }
    },
    get() {
      // 这个方法主要就是用来第一次进入视频播放时用来处理的
      // this.dataList = userList;//这个就是赋值加载视频啦
      getVideoList().then((res) => {
        if (res.code === 200) {
          const msg = res.data.map((e) => ({
            _id: e.id, //1.每一个视频独有 id （自定义）
            username: "意识到", //2.视频拥有者名称
            href: "https://vkceyugu.cdn.bspapp.com/VKCEYUGU-2908110e-6da2-4899-8b44-d45c153457ad/247c9ea8-c708-440b-9dbf-3c3facb728ee.png", //3.头像
            title: e.title, //4.第一行标题
            msg: e.description, //5.第二行内容
            state: "pause", //6.初始状态标志（不改）
            like: 0, //7.是否是自己喜欢，0不喜欢，1喜欢。默认不喜欢
            like_n: 0, //8.喜欢数量
            sms_n: 0, //9.评论数
            src: `${baseurl}/api/staticfiles/raw/${e.raw}`, //10.视频链接
            playNumber: 0, //11.播放视频的数量
            pinlun: [], //12.评论
            playIng: false, //13.播放（默认这个即可）
            isShowimage: false, //14.是否显示封面（默认这个即可）
            isShowProgressBarTime: false, //15.是否显示进度条（默认这个即可）
            isplay: true, //16.是否播放音频（默认这个即可）
          }));
          this.dataList = msg;
          this.dataList[0].state = "play";
          setTimeout(() => {
            //这里的延迟是为了避免执行时间太快而直接跳过执行的 bug
            uni.createVideoContext(this.dataList[0]._id, this).seek(0);
            uni.createVideoContext(this.dataList[0]._id, this).play();
          }, 200);
          this.dataList[0].isplay = false;
          setTimeout(() => {
            this.dataList[0].playIng = true;
          }, 500);
          var p = 0;
          this.showPlay = true;
          setTimeout(() => {
            ++p;
            this.dataList[p].isplay = true;
            // uni.createVideoContext(this.dataList[p]._id,this).play()
            setTimeout(() => {
              uni.createVideoContext(this.dataList[p]._id, this).seek(0);
              uni.createVideoContext(this.dataList[p]._id, this).pause();
              console.log(
                "预加载第" + (p + 1) + "个视频：" + this.dataList[p]._id
              );
            }, 800);
          }, 50);
        }
      });
    },
    onpullingdown() {
      // console.log('正在下拉刷新，此时手还在触摸没有松开')
      this.refreshing = true;
    },
    onrefresh() {
      // console.log('下拉刷新完毕，此时手松开了')
      setTimeout(() => {
        this.refreshing = false;
      }, 1000);
    },
    // 双击点赞效果
    touchstartHover(event) {
      if (this.touchNum >= 1) {
        // console.log('双击 -- X坐标：'+ event.touches[0].screenX);
        // console.log('双击 -- Y坐标：'+ event.touches[0].screenY);
        this.aixinLeft = event.touches[0].screenX - 50;
        this.aixinTop = event.touches[0].screenY - 50;
        this.isShowAixin = true;
        let max = 40;
        let min = -40;
        this.Rotate = Math.floor(Math.random() * (max - min + 1)) + min;
        setTimeout(() => {
          this.isShowAixin = false;
        }, 700);
        this.onTabItemTaps();
      }
    },
    //点击播放&&暂停
    tapVideoHover(state, event) {
      this.dataList[this.k].isShowimage = false;
      this.dataList[this.k].isShowProgressBarTime = false;
      this.ProgressBarOpacity = 0.5;
      this.dotWidth = 0;
      console.log("state--", state);
      // 1.启用双击点赞 --- start
      this.touchNum++;
      setTimeout(() => {
        if (this.touchNum == 1) {
          if (state == "play" || state == "continue") {
            this.dataList[this.k].state = "pause";
          } else {
            this.dataList[this.k].state = "continue";
          }
          if (this.dataList[this.k].state == "continue") {
            uni.createVideoContext(this.dataList[this.k]._id, this).play(); //暂停以后继续播放
            this.clearTime();
            setTimeout(() => {
              this.rotateX();
            }, 50);
          }
          if (this.dataList[this.k].state == "pause") {
            uni.createVideoContext(this.dataList[this.k]._id, this).pause(); //暂停以后继续播放
            this.clearTime();
          }
        }
        if (this.touchNum >= 2) {
          this.doubleLike();
        }
        this.touchNum = 0;
      }, 200);
      // --------------- ending
      // 2. 不启用双击点赞 start
      // if(state=='play'||state=='continue'){
      // 	this.dataList[this.k].state = 'pause';
      // }else{
      // 	this.dataList[this.k].state = 'continue';
      // }
      // if(this.dataList[this.k].state == 'continue'){
      // 	uni.createVideoContext(this.dataList[this.k]._id,this).play();//暂停以后继续播放
      // }
      // if(this.dataList[this.k].state == 'pause'){
      // 	uni.createVideoContext(this.dataList[this.k]._id,this).pause();//暂停以后继续播放
      // }
      // --------------- ending
    },
    doubleLike() {
      if (this.dataList[this.k].like == false) {
        this.dataList[this.k].like_n += 1;
        this.dataList[this.k].like = true;
      }
      /*
				点赞
				*/
    },
    toComment(index) {
      // 注意点击评论之后会执行这里
      /*
				（1）先加载缓冲
				（2）获取当前视频 ID 信息
				（3）🌟🌟🌟🌟重要🌟🌟🌟🌟
					- 一定要记得看 index.vue 里面
					 uni.setStorageSync("user",this.peopleList[i]);
					 这个东西，用于存储当前用户信息。在 插件里面会使用到这个东西，
					 记得写一下。

				（4）打开评论
				*/
      uni.showToast({
        title: "加载中...",
        icon: "none",
        position: "bottom",
        duration: 300,
      });
      uni.setStorageSync("videoID", this.dataList[index]._id);
      this.$refs.pinglun.open("bottom");
    },
    share() {
      uni.showToast({
        title: "分享",
        icon: "none",
      });
    },
    wxh5Video() {
      uni.navigateTo({
        url: "../wxh5previewVideo/wxh5previewVideo",
      });
    },
    previewVideo() {
      uni.navigateTo({
        url: "../previewVideo/previewVideo",
      });
    },
    toTwoVideo() {
      uni.navigateTo({
        url: "../new_index/new_index",
      });
    },
    tolistVideo() {
      uni.navigateTo({
        url: "../nvueSwiper/nvueSwiper",
      });
    },
    cLike(sss) {
      this.dataList[this.k].like = !this.dataList[this.k].like;
      const video = this.dataList[this.k];
      sss ? (video.like_n -= 1) : (video.like_n += 1);
      /*
				点赞
				*/
    },
    moveHandle() {},
    closeScrollview() {
      // 点击评论里面的叉叉，就会关闭评论
      this.$refs.pinglun.close();
    },
    onTabItemTaps() {
      // #ifdef APP-PLUS
      if (uni.getSystemInfoSync().platform == "ios") {
        let UIImpactFeedbackGenerator = plus.ios.importClass(
          "UIImpactFeedbackGenerator"
        );
        let impact = new UIImpactFeedbackGenerator();
        impact.prepare();
        impact.init(1);
        impact.impactOccurred();
      }
      if (uni.getSystemInfoSync().platform == "android") {
        uni.vibrateShort({
          success: () => {
            console.log("点击震动");
          },
        });
      }
      // #endif
    },
  },
};
</script>
<style>
.container {
  background-color: #000000;
}
.item {
  /* width : 750rpx; */
  background-color: #000000;
  position: relative;
}
.videoHover {
  position: absolute;
  top: 0;
  left: 0;
  flex: 1;
  background-color: rgba(0, 0, 0, 0.1);
  justify-content: center;
  align-items: center;

  /* border-style: dashed;
		border-color: #DD524D;
		border-width: 1px; */
}
.playState {
  width: 160rpx;
  height: 160rpx;
  opacity: 0.2;
}
.userInfo {
  position: absolute;
  bottom: 80px;
  right: 10px;
  flex-direction: column;
}
.userAvatar {
  border-radius: 500%;
  margin-bottom: 15px;
  border-style: solid;
  border-width: 2px;
  border-color: #ffffff;
}
.userAvatar {
  width: 100rpx;
  height: 100rpx;
}
.likeIco,
.shareIco,
.commentIco {
  width: 60rpx;
  height: 60rpx;
  margin-top: 15px;
}
.likeNum,
.commentNum,
.shareTex {
  color: #ffffff;
  font-size: 30rpx;
  text-align: center;
  margin: 5px;
}
.likeNumActive {
  color: red;
}
.content {
  width: 610rpx;
  z-index: 99;
  position: absolute;
  bottom: 30px;
  /* background-color: #007AFF; */
  /* justify-content: center; */
  padding: 15rpx;
  flex-direction: column;
  justify-content: flex-start;
  color: #ffffff;
}
.userName {
  font-size: 30rpx;
  color: #ffffff;
  margin-top: 80upx;
}
.words {
  margin-top: 10rpx;
  font-size: 30rpx;
  color: #ffffff;
}
.root {
  /* background-color: #000000; */
  background-color: #00ffff;
}
</style>
